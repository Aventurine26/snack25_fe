import { create } from 'zustand';
import Cookies from 'js-cookie';
import { jwtDecode } from 'jwt-decode';

// Î∞±ÏóîÎìúÏóêÏÑú Î≥¥ÎÇ¥ÎäîÍ±∞
// user {
//   email: 'test1111@naver.com',
//   name: 'Ï∞êÏ∞êÎßâ',
//   role: 'SUPERADMIN',
//   company: { name: 'Ï∞êÏ∞êÎßâ', id: 'ywkvll8eg16s83zcnik2gg1j' },
// }

// JWT ÌÜ†ÌÅ∞ Íµ¨Ï°∞ Ï†ïÏùò (Î∞±ÏóîÎìúÏóêÏÑú Ïñ¥Îñ§ Ï†ïÎ≥¥Î•º Ï£ºÎäîÏßÄÏóê Îî∞Îùº Îã§Î¶Ñ)
interface DecodedToken {
  id: number;
  email: string;
  name: string;
  company: {
    name: string;
    id: string;
  };
  companyId: string;
  role: 'SUPERADMIN' | 'ADMIN' | 'USER';
}

// Zustand Store ÌÉÄÏûÖ Ï†ïÏùò
interface AuthState {
  user: DecodedToken | null;
  isAuthenticated: boolean;
  login: () => void;
  logout: () => void;
}

// Zustand Store ÏÉùÏÑ±
export const useAuthStore = create<AuthState>((set) => ({
  user: null,
  isAuthenticated: false,

  // Î°úÍ∑∏Ïù∏ Ïãú Ïã§Ìñâ (ÌÜ†ÌÅ∞ÏùÑ Ïø†ÌÇ§ÏóêÏÑú ÏùΩÍ≥† ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏)
  login: () => {
    const token = Cookies.get('accessToken');
    if (token) {
      try {
        const decoded = jwtDecode<DecodedToken>(token);
        console.log('üìå ÎîîÏΩîÎî©Îêú ÌÜ†ÌÅ∞:', decoded); // üî• ÏΩòÏÜîÏóêÏÑú ÏûêÎèô ÌôïÏù∏
        set({ user: decoded, isAuthenticated: true });
      } catch (error) {
        console.error('ÌÜ†ÌÅ∞ ÎîîÏΩîÎî© Ïò§Î•ò:', error);
      }
    }
  },

  // Î°úÍ∑∏ÏïÑÏõÉ Ïãú Ïã§Ìñâ (ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî Î∞è Ïø†ÌÇ§ ÏÇ≠Ï†ú)
  logout: () => {
    Cookies.remove('accessToken');
    set({ user: null, isAuthenticated: false });
  },
}));
